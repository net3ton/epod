from __future__ import with_statement

import sys
import gsi_sys
import os.path


#----- interface template -------------------------------------------

template_iface = """/*AUTOGENERATED CODE, DO NOT EDIT*/

#ifndef _EPOD_AUTOGENERATED_RES_HEADER_
#define _EPOD_AUTOGENERATED_RES_HEADER_

#include <epod_graphics.h>
#include <epod_texture.h>
#include <epod_font.h>
#include <epod_sound.h>


namespace rc
{
  struct Textures
  {
    Textures();

MEMBERS_TEXES
  };


  struct Tiles
  {
    Tiles(Textures &texes);

MEMBERS_TILES
  };


  struct Fonts
  {
    Fonts(Textures &texes);

MEMBERS_FONTS
  };


  struct Sounds
  {
    Sounds();

MEMBERS_SOUNDS
  };


  struct Resources
  {
    Resources();

    Textures mTextures;
    Tiles mTiles;
    Fonts mFonts;
    Sounds mSounds;

    void setTilesLang(const char *lang);
  };

} // namespace rc

#endif // _EPOD_AUTOGENERATED_RES_HEADER_
"""

#----- implementation template --------------------------------------

template_impl = """/*AUTOGENERATED CODE, DO NOT EDIT*/

#include "FNAME.h"


namespace rc
{
  Textures::Textures()
CTOR_TEXES
  {
  }


  Tiles::Tiles(Textures &texes)
CTOR_TILES
  {
  }


  void Resources::setTilesLang(const char *lang)
  {
LANG_TILES
  }


  Fonts::Fonts(Textures &texes)
CTOR_FONTS
  {
  }

  Sounds::Sounds()
CTOR_SOUNDS
  {
  }

  Resources::Resources()
    :mTiles(mTextures)
    ,mFonts(mTextures)
  {
  }

} // namespace rc
"""

#------------------------------------------------------------------------------

# comparing new-data and file-data
def cmp_file_data(data, file_name):
  if os.path.exists(file_name):
    with open(file_name, 'r') as file:
      if file.read() == data:
        return True

  return False


def make_texname_by_path(texFilePath):
  texFileName = os.path.basename(texFilePath)
  texName, texExt = os.path.splitext(texFileName)
  return texName

#------------------------------------------------------------------------------

def gen_tiles_info(tiles_info, textures, output_dir, data_h, data_cpp):
  # check langs
  langs = []
  lang_tiles = []
  
  for name, lang, tiles in tiles_info:
    if (not lang):
      continue
    
    langs.append(lang)
    for x, y, wr, hr, xo, yo, w, h, tileName, tw, th, texFilePath in tiles:
      if (not tileName in lang_tiles):
        lang_tiles.append(tileName)
  
  ######
  
  members_tiles = ""
  ctor_tiles = ""
  
  lang_tiles_str = []
  for lang in langs:
    lang_tiles_str.append("")
  
  start_members = ["", "\n"]
  start_ctors = ["    :", "\n    ,"]
  
  is_first = 0
  for name, lang, tiles in tiles_info:
    for x, y, wr, hr, xo, yo, w, h, tileName, tw, th, texFilePath in tiles:
      
      texFilePath = texFilePath[len(output_dir):]
      texName = textures.get(texFilePath)
      if (not texName):
        texName = make_texname_by_path(texFilePath)
        textures[texFilePath] = texName
      
      if (not lang):
        members_tiles += "%s    ep::Tile %s;" % (start_members[is_first], tileName)
      
      if (not lang):
        ctor_tiles += "%s%s(&texes.%s, %d, %d, %ff, %ff, %ff, %ff, %d, %d, %d, %d)" % (start_ctors[is_first], tileName, texName, w, h, float(x)/tw, float(y)/th, float(x+wr)/tw, float(y+hr)/th, xo, yo, wr, hr)
      else:
        ind = langs.index(lang)
        lang_tiles_str[ind] += "\n      mTiles.%s.set(&mTextures.%s, %d, %d, %ff, %ff, %ff, %ff, %d, %d, %d, %d);" % (tileName, texName, w, h, float(x)/tw, float(y)/th, float(x+wr)/tw, float(y+hr)/th, xo, yo, wr, hr)
      
      is_first = 1
  
  # lang tiles in header
  if (len(lang_tiles)):
    members_tiles += "\n\n    /// lang tiles"
    for tileName in lang_tiles:
      members_tiles += "\n    ep::Tile %s;" % (tileName)
  
  # lang tiles in cpp
  lang_tiles_res = ""
  start_if = ["if", "else if"]

  is_first = 0
  for i in xrange(len(langs)):
    lang_tiles_res += "%s    %s (!strcmp(lang, \"%s\")) \n    {" % (start_members[is_first], start_if[is_first], langs[i])
    lang_tiles_res += lang_tiles_str[i]
    lang_tiles_res += "\n    }"
    is_first = 1
  ####
  
  data_h = data_h.replace('MEMBERS_TILES', members_tiles)
  data_cpp = data_cpp.replace('CTOR_TILES', ctor_tiles).replace('LANG_TILES', lang_tiles_res)
  
  return (data_h, data_cpp)


def gen_fonts_info(fonts_info, textures, data_h, data_cpp):
  
  members_fonts = ""
  ctor_fonts = ""
  
  is_first = 0
  start_members = ["", "\n"]
  start_ctors = ["    :", "\n    ,"]
  
  for fontName, fntFilePath, texFilePath in fonts_info:
    
    texName = textures.get(texFilePath)
    if (not texName):
      texName = make_texname_by_path(texFilePath)
      textures[texFilePath] = texName
    
    members_fonts += "%s    ep::Font %s;" % (start_members[is_first], fontName)
    ctor_fonts += "%s%s(\"%s\", &texes.%s)" % (start_ctors[is_first], fontName, fntFilePath.replace('\\','\\\\'), texName)
    
    is_first = 1
  
  data_h = data_h.replace('MEMBERS_FONTS', members_fonts)
  data_cpp = data_cpp.replace('CTOR_FONTS', ctor_fonts)
  
  return (data_h, data_cpp)


def gen_textures_info(textures, data_h, data_cpp):
  members_texes = ""
  ctor_texes = ""
  
  is_first = 0
  start_members = ["", "\n"]
  start_ctors = ["    :", "\n    ,"]
  
  for texFile, texName in textures.items():
    
    members_texes += "%s    ep::Texture %s;" % (start_members[is_first], texName)
    ctor_texes += "%s%s(\"%s\")" % (start_ctors[is_first], texName, texFile.replace('\\','\\\\'))
    
    is_first = 1
  
  data_h = data_h.replace('MEMBERS_TEXES', members_texes)
  data_cpp = data_cpp.replace('CTOR_TEXES', ctor_texes)
  
  return (data_h, data_cpp)


def gen_sounds_info(sounds, data_h, data_cpp):
  members_sounds = ""
  ctor_sounds = ""
  
  is_first = 0
  start_members = ["", "\n"]
  start_ctors = ["    :", "\n    ,"]
  looped_str = ["false", "true"]
  
  for soundName, soundPath, soundGroup, soundLooped in sounds:
    
    if (soundGroup == 0):
      members_sounds += "%s    ep::Sound %s;" % (start_members[is_first], soundName)
      ctor_sounds += "%s%s(\"%s\", %s)" % (start_ctors[is_first], soundName, soundPath.replace('\\','\\\\'), looped_str[soundLooped])
    else:
      members_sounds += "%s    ep::Music %s;" % (start_members[is_first], soundName)
      ctor_sounds += "%s%s(\"%s\")" % (start_ctors[is_first], soundName, soundPath.replace('\\','\\\\'))
    
    is_first = 1
  
  data_h = data_h.replace('MEMBERS_SOUNDS', members_sounds)
  data_cpp = data_cpp.replace('CTOR_SOUNDS', ctor_sounds)
  
  return (data_h, data_cpp)

#------------------------------------------------------------------------------

def gen_source_code(tiles_info, fonts_info, sounds_info, output_dir, fnames):
  #assert os.path.isdir(output_dir), "directory '%s' do not exists" % output_dir
  
  output_filename_cpp = os.path.join(output_dir, fnames + ".cpp")
  output_filename_h = os.path.join(output_dir, fnames + ".h")
  gsi_sys.create_path_to_file(output_filename_h)
  
  data_h = template_iface
  data_cpp = template_impl.replace('FNAME', fnames)
  
  textures = {}
  data_h, data_cpp = gen_tiles_info(tiles_info, textures, output_dir, data_h, data_cpp)
  data_h, data_cpp = gen_fonts_info(fonts_info, textures, data_h, data_cpp)
  data_h, data_cpp = gen_textures_info(textures, data_h, data_cpp)
  data_h, data_cpp = gen_sounds_info(sounds_info, data_h, data_cpp)
  
  # cpp file
  with open(output_filename_cpp, 'w') as file_cpp:
    print >> file_cpp, data_cpp,
  
  # hpp file
  if not cmp_file_data(data_h, output_filename_h):
    print "!header was changed!"
    with open(output_filename_h, 'w') as file_h:
      print >> file_h, data_h,
